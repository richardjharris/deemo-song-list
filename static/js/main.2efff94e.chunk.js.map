{"version":3,"sources":["SongData.js","Filters.js","CollectionRow.js","util/matchDifficulty.js","util/formatNumber.js","DifficultyScores.js","SongRow.js","SongList.js","util/usePersistedState.js","FilterableSongList.js","serviceWorker.js","index.js","App.js"],"names":["songData","artistMap","platformMap","maxNumericDifficulty","collectionCount","Object","keys","_jsonData","length","collectionIndex","collection","platform","platforms","songs","song","artist","difficulty","intScore","id","name","caseInsensitive","Intl","Collator","compare","this","_artistNames","sort","_maxNumericDifficulty","_collections","_platforms","difficultySelectorMarks","maxDiff","i","push","value","label","_buildDifficultySelectorMarks","useStyles","makeStyles","formLabel","fontWeight","Filters","filters","onChange","onClear","useState","drawerOpen","setDrawerOpen","classes","console","log","handleChange","useCallback","handleCheckbox","event","checked","target","selectPlatform","toggleDrawer","open","type","key","clearFilters","filterGridItems","element","Slider","marks","valueLabelDisplay","min","step","max","_","Autocomplete","freeSolo","selectOnFocus","options","artists","size","renderInput","params","TextField","variant","ButtonGroup","fullWidth","map","selected","Button","onClick","color","filterGrid","style","maxWidth","margin","padding","Grid","container","spacing","alignItems","item","Fragment","sm","xs","Typography","className","align","FormControlLabel","control","Switch","showNoteCounts","showFavorites","Drawer","anchor","onClose","width","CollectionRow","props","ListSubheader","background","paddingBottom","index","totalCollections","pipStart","pipWidth","height","backgroundColor","position","top","left","CollectionPositionBar","matchDifficulty","strDiff","filter","intDiff","difficultyAsNumber","isNaN","formatInteger","num","Number","toLocaleString","navigator","language","minimumFractionDigits","theme","difficultySquare","typography","button","border","maxHeight","textAlign","overflow","lineHeight","difficultySquareWithNoteCount","marginTop","marginBottom","noteCount","fontSize","difficultyColors","darkColors","c","chroma","darken","css","ex","React","memo","scores","noteCounts","diffSquares","borderColor","countSquares","borderCollapse","sq","time","favorite","onToggleFavorite","secondary","ListItem","divider","ContainerComponent","ListItemIcon","IconButton","aria-label","ListItemText","primary","ListItemSecondaryAction","direction","justify","notecounts","prev","next","SongList","collections","favorites","items","Divider","flat","List","dense","usePersistedState","defaultValue","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","initialValues","FilterableSongList","setFilters","setFavorites","handleFilterChange","prevState","handleFilterClear","handleToggleFavorite","songID","newFavorites","assign","filterSongs","deviceSongTotal","filteredSongs","platformInfo","artistLower","toLowerCase","indexOf","hit","filtered","totalCount","filteredCount","filterCollections","AppBar","paddingTop","Toolbar","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2efff94e.chunk.js","sourcesContent":["// API to the (internally baked) list of songs.\nimport _jsonData from './songs.json';\n\nclass SongData {\n  constructor() {\n    var artistMap = {};\n    var platformMap = {};\n    var maxNumericDifficulty = 1;\n    const collectionCount = Object.keys(_jsonData).length;\n    var collectionIndex = 0;\n    for (let collection of _jsonData) {\n      for (const platform in collection.platforms) {\n        platformMap[platform] = true;\n      }\n\n      // Include information about the collection's relative position,\n      // to help the UI render it\n      // TODO: ideally this should take into account the chosen device.\n      collection['index'] = collectionIndex++;\n      collection['totalCollections'] = collectionCount;\n\n      for (let song of collection.songs) {\n        artistMap[song.artist] = true;\n\n        for (const score of song.difficulty) {\n          var intScore = +score;\n          // <= 20 prevents the 01000101 score being interpreted as a number\n          if (intScore && intScore <= 20 && intScore > maxNumericDifficulty) {\n            maxNumericDifficulty = intScore;\n          }\n        }\n\n        // Creates a cycle, but it's okay as we only store this data once\n        // for the lifetime of the app.\n        song['collection'] = collection;\n\n        // Give each song a unique ID for React key purposes\n        song['id'] = collection.id + ' ' + song.name;\n      }\n    }\n\n    const caseInsensitive = new Intl.Collator('en').compare;\n\n    this._artistNames = Object.keys(artistMap).sort(caseInsensitive);\n    this._maxNumericDifficulty = maxNumericDifficulty;\n    this._collections = _jsonData;\n    this._platforms = Object.keys(platformMap).sort(caseInsensitive);\n  }\n\n  maxNumericDifficulty() {\n    return this._maxNumericDifficulty;\n  }\n\n  artists() {\n    return this._artistNames;\n  }\n\n  collections() {\n    return this._collections;\n  }\n\n  platforms() {\n    return this._platforms;\n  }\n}\n\nconst songData = new SongData();\nexport default songData;","import songData from './SongData';\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  Switch, Grid, TextField, Slider, Button, ButtonGroup, Typography,\n  FormControlLabel, Drawer\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Autocomplete } from '@material-ui/lab';\n\nconst _buildDifficultySelectorMarks = () => {\n  const maxDiff = songData.maxNumericDifficulty();\n  var difficultySelectorMarks = [];\n  for (var i = 1; i <= maxDiff; i++) {\n    difficultySelectorMarks.push({\n      value: i,\n      label: `${i}`,\n    });\n  }\n  difficultySelectorMarks.push({\n    value: maxDiff + 1,\n    label: '🞷',\n  });\n  return difficultySelectorMarks;\n};\n\nconst difficultySelectorMarks = _buildDifficultySelectorMarks();\n\nconst useStyles = makeStyles({\n  formLabel: {\n    fontWeight: 'bold',\n  }\n});\n\nexport default function Filters({ filters, onChange, onClear }) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const classes = useStyles();\n  console.log('rendering filters');\n\n  const handleChange = useCallback((name, value) => {\n    onChange(name, value);\n  }, [onChange]);\n\n  // Checkboxes are uncontrolled, so we manage the state.\n  const handleCheckbox = useCallback(name => event => {\n    const checked = event.target.checked;\n    onChange(name, !!checked);\n  }, [onChange]);\n\n  const selectPlatform = useCallback((platform) => {\n    if (filters.platform === platform) {\n      // Unset platform i.e. toggle the selected button\n      platform = null;\n    }\n    onChange('platform', platform);\n  }, [onChange, filters.platform]);\n\n  const toggleDrawer = useCallback((open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  }, [setDrawerOpen]);\n\n  // TODO this used to be a proper callback\n  const clearFilters = onClear;\n\n   const difficultySlider = (\n      <Slider\n        id=\"difficulty-slider\"\n        value={filters.difficulty}\n        marks={difficultySelectorMarks}\n        valueLabelDisplay=\"off\"\n        min={1}\n        step={1}\n        max={songData.maxNumericDifficulty() + 1}\n        onChange={(_, value) => handleChange('difficulty', value)}\n      />);\n  const artistInput = (\n    <Autocomplete\n      id=\"artist-input\"\n      value={filters.artist}\n      freeSolo\n      selectOnFocus\n      options={songData.artists()}\n      size=\"small\"\n      onChange={(_, value) => handleChange('artist', value)}\n      renderInput={params => <TextField {...params} variant=\"outlined\" />}\n    />);\n  const platformSelect = (\n    <ButtonGroup\n      id=\"platform-select\"\n      variant=\"contained\"\n      size=\"small\"\n      fullWidth\n    >\n      {songData.platforms().map((platform) => {\n        const selected = filters.platform === platform;\n        return (\n          <Button\n            key={platform}\n            onClick={(_) => { selectPlatform(platform) }}\n            color={selected ? \"primary\" : \"default\"}\n          >\n            {platform}\n          </Button>\n        );\n      })}\n    </ButtonGroup>\n  );\n\n  const filterGridItems = [\n    { name: 'Difficulty', element: difficultySlider },\n    { name: 'Artist', element: artistInput },\n    { name: 'Platform', element: platformSelect },\n  ];\n\n  const filterGrid = (\n    // Hack to avoid scrollbars\n    <div style={{maxWidth: '90%', margin: '0 auto', padding: '0.5em'}}>\n      <Grid container spacing={1} alignItems='center'>\n        {filterGridItems.map(item => {\n          return (<React.Fragment key={item.name}>\n            <Grid item sm={2} xs={12}>\n              <Typography className={classes.formLabel}>{item.name}</Typography>\n            </Grid>\n            <Grid item sm={10} xs={12}>\n              {item.element}\n            </Grid>\n          </React.Fragment>);\n        })}\n        <Grid item xs={4} align='center'>\n            <FormControlLabel control={\n              <Switch\n                checked={filters.showNoteCounts}\n                onChange={handleCheckbox('showNoteCounts')}\n                value=\"showNoteCounts\"\n                color=\"primary\"\n              />\n            }\n            label=\"Show note counts\"\n            />\n        </Grid>\n        <Grid item xs={4} align='center'>\n            <FormControlLabel control={\n              <Switch\n                checked={filters.showFavorites}\n                onChange={handleCheckbox('showFavorites')}\n                value=\"showFavorites\"\n                color=\"primary\"\n              />\n            }\n            label=\"Show favourites only\"\n            />\n        </Grid>\n        <Grid item xs={4} align='center'>\n          <Button\n            onClick={clearFilters}\n            color=\"secondary\"\n          >Clear filters</Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n\n  return (<>\n    <Drawer\n      anchor=\"top\"\n      open={drawerOpen}\n      //open={true}\n      onClose={toggleDrawer(false)}\n    >{filterGrid}</Drawer>\n    <Button\n      style={{ width: '100%' }}\n      onClick={toggleDrawer(true)}\n      variant=\"contained\"\n      color=\"primary\"\n    >Open filters</Button>\n  </>);\n}\n","import React from 'react';\nimport { ListSubheader } from \"@material-ui/core\";\n\n// Renders a bar that indicates the collection's position in the total\n// set of collections, to make it easier to scroll to in the game.\n// index: position of this collection in the set (0-indexed)\n// totalCollections: total number of collections\nfunction CollectionPositionBar(index, totalCollections) {\n  const barWidth = 10;\n  const barHeight = 0.15;\n  const pipStart = (index / totalCollections) * barWidth;\n\n  // This is the 'true' width of the pip, e.g. if there are 10 collections, it will\n  // be 10% of the bar width. However, we then scale it up to make it easier to see.\n  const pipWidth = barWidth / totalCollections;\n\n return (<div style={{\n    width: `${barWidth}em`,\n    height: `${barHeight}em`,\n    backgroundColor: '#bebeff',\n    // center align, and move closer to the collection name (higher)\n    margin: '-0.5em auto 0.5em auto',\n  }}>\n    <div style={{\n      position: 'relative',\n      top: `-${pipWidth / 1.5}em`,\n      left: `${pipStart}em`,\n      width: `${pipWidth * 2}em`, \n      height: `${pipWidth * 2}em`,\n      backgroundColor: '#303f9f',\n    }}>\n      &nbsp;\n    </div>\n  </div>);\n\n}\n\nexport default function CollectionRow(props) {\n  const collection = props.collection;\n\n  // Set background-color, otherwise sticky headers overlap\n  return (\n    <ListSubheader style={{background: 'white', paddingBottom: '1em'}}>\n      {collection.name}\n      {CollectionPositionBar(collection.index, collection.totalCollections)}\n    </ListSubheader>\n  );\n}","import songData from '../SongData';\n\n// Given a string difficulty and a filter, return true if the difficulty\n// matches the filter. The filter should be an array of two values\n// (min and max difficulty) with extra difficulties such as 'L' represented\n// as one level higher than the largest known numeric difficulty.\nexport function matchDifficulty(strDiff, filter) {\n  // Some difficulties are missing, in which case we don't match.\n  if (strDiff === null) return false;\n\n  if (filter == null) return false;\n\n  let intDiff = difficultyAsNumber(strDiff);\n  return (intDiff >= filter[0]\n    && intDiff <= filter[1]);\n}\n\n// Convert a string difficulty to a number. Extra difficulties\n// such as 'L' are treated as one number higher than the largest\n// known numeric difficulty.\nexport function difficultyAsNumber(strDiff) {\n  // Some difficulties are missing.\n  if (strDiff === null) return null;\n\n  let intDiff = +strDiff;\n\n  // Treat 'special' difficulties such as M or L as one level\n  // more difficult than usual.\n  // HACK: >20 to treat '01001001' difficulty as special (zeroichi)\n  if (isNaN(intDiff) || intDiff > 20) {\n    intDiff = songData.maxNumericDifficulty() + 1;\n  }\n  return intDiff;\n}","// Round number and add commas at thousands (subject to locale)\nexport function formatInteger(num) {\n  return Number(num).toLocaleString(\n    navigator.language, { minimumFractionDigits: 0 },\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\nimport chroma from 'chroma-js';\n\nimport { difficultyAsNumber } from './util/matchDifficulty';\nimport { formatInteger } from './util/formatNumber';\n\nconst useStyles = makeStyles(theme => ({\n  difficultySquare: {\n    ...theme.typography.button,\n    margin: theme.spacing(1),\n    border: '1px solid transparent',\n    width: '1.8rem',\n    maxWidth: '1.8rem',\n    height: '1.8rem',\n    maxHeight: '1.8rem',\n    textAlign: 'center',\n    overflow: 'hidden',\n    lineHeight: '1.8rem',\n  },\n  difficultySquareWithNoteCount: {\n    marginTop: theme.spacing(0.2),\n    marginBottom: theme.spacing(0.2),\n  },\n  noteCount: {\n    fontSize: '70%',\n  },\n}));\n\nconst easyGreen = 'rgb(197,244,197)';\nconst normalBlue = 'rgb(197,197,244)';\nconst hardGold = '#f6dd58';\nconst extraWhite = 'white';\n\nconst difficultyColors = [easyGreen, normalBlue, hardGold, extraWhite];\nconst darkColors = difficultyColors.map(c => chroma(c).darken(1.2).css());\n\nfunction DifficultyScores(props) {\n  const { scores, noteCounts, showNoteCounts } = props;\n  const classes = useStyles();\n\n  console.log(\"Rendering difficulty scores\", scores);\n\n  // First build the difficulty squares\n  const diffSquares = [0,1,2,3].filter(i => scores[i] !== null).map((i) => {\n      let className = classes.difficultySquare\n                    + ` difficulty-${difficultyAsNumber(scores[i])}`;\n\n      if (showNoteCounts) {\n        // Reduce bottom padding\n        className += ` ${classes.difficultySquareWithNoteCount}`;\n      }\n\n      let style = {\n        backgroundColor: difficultyColors[i],\n        borderColor: darkColors[i],\n      }\n      if (scores[i].length > 2) {\n        style.fontSize = '50%';\n      }\n\n      return (<Typography key={i}\n        className={className}\n        style={style}>\n        {scores[i]}\n      </Typography>);\n  });\n\n  if (showNoteCounts) {\n    const countSquares = [0,1,2,3].filter(i => noteCounts[i] !== null).map((i) => {\n      let color = darkColors[i];\n\n      return (<span key={i}\n        className={classes.noteCount}\n        style={{ color }}>\n          {formatInteger(noteCounts[i])}\n        </span>);\n    });\n\n    return (<table style={{ borderCollapse: 'collapse' }}>\n      <tbody>\n        <tr key=\"scores\">{diffSquares.map((sq) => \n          <td key={sq.key}>{sq}</td>\n        )}</tr>\n        <tr key=\"notes\">{countSquares.map((c) =>\n          <td style={{ padding: 0 }} key={c.key}>{c}</td>\n        )}</tr>\n      </tbody>\n    </table>);\n  }\n  else {\n    // Render a simple list\n    return diffSquares;\n  }\n}\n\nconst ex = React.memo(DifficultyScores);\nexport default ex;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, IconButton, Typography, ListItem, ListItemText, ListItemSecondaryAction, ListItemIcon } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport DifficultyScores from './DifficultyScores';\n\nconst useStyles = makeStyles(theme => ({\n  time: {\n    color: 'gray',\n    fontSize: '80%',\n    margin: theme.spacing(1),\n  }\n}));\n\nfunction SongRow({ song, showNoteCounts, favorite, onToggleFavorite }) {\n  const classes = useStyles();\n  const secondary = song.artist + (showNoteCounts ? ` (${song.time})` : '');\n  console.log(`Rendering ${song.name} fav=${favorite}`);\n\n  return (\n    // <div> is required to avoid bullet points appearing when we are using\n    // AutoSizer.\n    <ListItem divider ContainerComponent=\"div\">\n      <ListItemIcon>\n        <IconButton\n          onClick={() => onToggleFavorite(song.id)}\n          aria-label={favorite ? \"mark as favorite\" : \"unmark as favorite\"}\n        >\n          {favorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n        </IconButton>\n      </ListItemIcon>\n      <ListItemText primary={song.name} secondary={secondary} />\n      <ListItemSecondaryAction>\n        <Grid container direction=\"column\">\n          <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n            <DifficultyScores\n              scores={song.difficulty}\n              noteCounts={song.notecounts}\n              showNoteCounts={showNoteCounts} />\n          </Grid>\n          {showNoteCounts ? null : (\n            <Grid container spacing={1} direction=\"row\" justify=\"flex-end\">\n              <Typography className={classes.time}>{song.time}</Typography>\n            </Grid>\n          )}\n        </Grid>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nfunction areEqual(prev, next) {\n  return prev.song.id === next.song.id\n    && prev.favorite === next.favorite\n    && prev.showNoteCounts === next.showNoteCounts;\n}\n\nexport default React.memo(SongRow, areEqual);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider, List } from '@material-ui/core';\n\nimport CollectionRow from './CollectionRow';\nimport SongRow from './SongRow';\n\nexport default function SongList(props) {\n  const collections = props.collections;\n  const filters = props.filters;\n  const favorites = props.favorites;\n  const onToggleFavorite = props.onToggleFavorite;\n\n  const items = collections.map(collection => [\n    <CollectionRow key={`collection-row-${collection.id}`}\n      collection={collection}></CollectionRow>,\n    collection.songs.map(song => (\n      <SongRow\n        key={`song-row-${song.id}`}\n        song={song}\n        showNoteCounts={filters.showNoteCounts}\n        favorite={favorites[song.id]}\n        onToggleFavorite={onToggleFavorite}\n      ></SongRow>\n    )),\n    <Divider key={`divider-${collection.id}`} />\n  ].flat()).flat();\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <List dense={false}>{items}</List>\n    </div>\n  );\n}","import React, { useEffect } from 'react';\n\n// Exports a state item that syncs to localStorage\nexport function usePersistedState(key, defaultValue) {\n  const [state, setState] = React.useState(\n    () => JSON.parse(localStorage.getItem(key)) || defaultValue\n  );\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}","import React, { useCallback } from 'react';\nimport { Typography, Grid, AppBar, Toolbar, Container } from '@material-ui/core';\n\nimport Filters from './Filters';\nimport SongList from './SongList';\nimport songData from './SongData';\nimport { matchDifficulty } from './util/matchDifficulty';\nimport { usePersistedState } from './util/usePersistedState';\nimport { formatInteger } from './util/formatNumber';\n\nconst initialValues = {\n  difficulty: [1, songData.maxNumericDifficulty() + 1],\n  showNoteCounts: false,\n  showFavorites: false,\n  artist: null,\n  platform: null,\n};\n\n// Renders a song list with interactive filters.\n// Manages the filter state.\nexport function FilterableSongList(props) {\n  let [filters, setFilters] = usePersistedState('deemoFilters', {});\n  let [favorites, setFavorites] = usePersistedState('deemoFavorites', {});\n\n  // Provide defaults, otherwise React considers the inputs to be\n  // 'uncontrolled'. We do it in a seperate step so we can support older\n  // LocalStorage values even after adding new inputs.\n  filters = {\n    ...initialValues,\n    ...filters,\n  };\n\n  const handleFilterChange = useCallback((name, value) => {\n    setFilters(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  }, [setFilters]);\n\n  const handleFilterClear = useCallback(() => {\n    setFilters(initialValues);\n  }, [setFilters]);\n\n  const handleToggleFavorite = useCallback((songID) => {\n    setFavorites(favorites => {\n      console.log(\"toggle favorite\", songID);\n      let newFavorites = Object.assign({}, favorites);\n      if (favorites[songID]) {\n        delete newFavorites[songID];\n      }\n      else {\n        newFavorites[songID] = true;\n      }\n      return newFavorites;\n    });\n  }, [setFavorites]);\n\n  const filterSongs = (songs, filter) => {\n    let deviceSongTotal = 0;\n\n    const filteredSongs = songs.filter((song) => {\n      if (filters.showFavorites && !favorites[song.id]) {\n        return false;\n      }\n\n      // When showing song count (e.g. '12 of 300 songs shown') we don't\n      // include songs from other devices, so filter that first.\n      if (filter.platform) {\n        let platformInfo = song.platforms || song.collection.platforms;\n        if (platformInfo) {\n          let status = platformInfo[filter.platform];\n          if (status === '×') {\n            return false;\n          }\n        }\n      }\n\n      deviceSongTotal++;\n\n      if (filter.artist) {\n        const artistLower = filter.artist.toLowerCase();\n        if (song.artist.toLowerCase().indexOf(artistLower) === -1) {\n          return false;\n        }\n      }\n      if (filter.difficulty) {\n        let hit = false;\n        for (const diff of song.difficulty) {\n          if (matchDifficulty(diff, filter.difficulty)) {\n            hit = true;\n            break;\n          }\n        }\n        if (!hit) return false;\n      }\n\n      return true;\n    });\n\n    return { deviceSongTotal, filteredSongs };\n  };\n\n  const filterCollections = (collections, filter) => {\n    let filtered = [];\n    let totalCount = 0;\n    let filteredCount = 0;\n    for (const collection of collections) {\n      const { deviceSongTotal, filteredSongs }\n        = filterSongs(collection.songs, filter);\n\n      totalCount += deviceSongTotal;\n\n      if (filteredSongs.length > 0) {\n        filtered.push({\n          ...collection,\n          songs: filteredSongs,\n        });\n        filteredCount += filteredSongs.length;\n      }\n    }\n\n    return { filtered, totalCount, filteredCount };\n  }\n\n  const { filtered, totalCount, filteredCount } = filterCollections(songData.collections(), filters);\n  return (\n    <>\n      <AppBar position=\"fixed\" color=\"secondary\">\n        <Grid container>\n          <Grid item xs={12}>\n            <Filters onChange={handleFilterChange} onClear={handleFilterClear} filters={filters} />\n          </Grid>\n          <Grid item xs={12} style={{ marginTop: '-0.2em', paddingTop: '0.3em', paddingBottom: '0.2em' }}>\n            <Typography variant=\"caption\">\n              Showing {\n                filteredCount === totalCount ? `${formatInteger(totalCount)}`\n                                             : `${formatInteger(filteredCount)} of ${formatInteger(totalCount)}`\n              } song{filteredCount === 1 ? '' : 's'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </AppBar>\n      {/* extra Toolbar element so SongList is offset and they don't overlap */}\n      <Toolbar />\n      <Container>\n        <SongList\n          collections={filtered}\n          filters={filters}\n          favorites={favorites}\n          onToggleFavorite={handleToggleFavorite} />\n      </Container>\n    </>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { FilterableSongList } from './FilterableSongList';\n\n// The app manages the filter state as it is needed by both\n// child components.\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <FilterableSongList />\n    </div>\n  );\n}"],"sourceRoot":""}